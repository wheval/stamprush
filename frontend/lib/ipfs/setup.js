#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

/**
 * Interactive setup script for IPFS Upload System
 * Run with: node frontend/lib/ipfs/setup.js
 */

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

async function main() {
  console.log('üöÄ Welcome to Stamp Rush IPFS Setup!');
  console.log('=====================================\n');
  
  console.log('This script will help you configure the IPFS upload system using Pinata.\n');
  
  // Check if .env already exists
  const envPath = path.join(__dirname, '../../.env.local');
  const envExists = fs.existsSync(envPath);
  
  if (envExists) {
    console.log('‚ö†Ô∏è  Found existing .env.local file');
    const overwrite = await askQuestion('Do you want to overwrite it? (y/n): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
  }
  
  console.log('\nüìã Please provide your Pinata API credentials:');
  console.log('   You can get these from: https://app.pinata.cloud/keys\n');
  
  // Get API credentials
  const apiKey = await askQuestion('Pinata API Key: ');
  const apiSecret = await askQuestion('Pinata API Secret: ');
  
  if (!apiKey || !apiSecret) {
    console.log('‚ùå API Key and Secret are required!');
    rl.close();
    return;
  }
  
  console.log('\nüîß Optional configuration:');
  const customGateway = await askQuestion('Custom IPFS Gateway URL (press Enter for default): ');
  
  // Create .env content
  const envContent = `# Stamp Rush Environment Configuration
# Generated by setup script on ${new Date().toISOString()}

# Pinata IPFS Configuration
PINATA_API_KEY=${apiKey}
PINATA_API_SECRET=${apiSecret}

# Optional: Custom IPFS Gateway
${customGateway ? `IPFS_GATEWAY_URL=${customGateway}` : '# IPFS_GATEWAY_URL=https://gateway.pinata.cloud/ipfs/'}

# Starknet Configuration (existing)
NEXT_PUBLIC_STARKNET_NETWORK=mainnet-alpha
NEXT_PUBLIC_CONTRACT_ADDRESS=0x06da58930ab1bfd7f808cd4b19a7f25f85e5af6b806e820ceecdb73162edb383

# Development Settings
NODE_ENV=development
`;

  // Write .env file
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n‚úÖ .env.local file created successfully!');
  } catch (error) {
    console.error('\n‚ùå Failed to create .env.local file:', error.message);
    rl.close();
    return;
  }
  
  // Test the connection
  console.log('\nüß™ Testing Pinata connection...');
  
  try {
    // Load the newly created environment
    require('dotenv').config({ path: envPath });
    
    const { testPinataConnection } = require('./pinata');
    const connectionOk = await testPinataConnection();
    
    if (connectionOk) {
      console.log('‚úÖ Pinata connection successful!');
    } else {
      console.log('‚ùå Pinata connection failed. Please check your credentials.');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  Could not test connection:', error.message);
    console.log('   You can test it later by running: node frontend/lib/ipfs/test-upload.js');
  }
  
  console.log('\nüéâ Setup complete!');
  console.log('\nNext steps:');
  console.log('1. Install dependencies: cd frontend && npm install');
  console.log('2. Test the setup: node frontend/lib/ipfs/test-upload.js');
  console.log('3. Check the documentation: frontend/lib/ipfs/README.md');
  
  rl.close();
}

// Validation functions
function validateApiKey(key) {
  return key && key.length > 10;
}

function validateApiSecret(secret) {
  return secret && secret.length > 10;
}

function showInstructions() {
  console.log(`
üìö PINATA SETUP INSTRUCTIONS:

1. Sign up for a Pinata account:
   ‚Üí Go to https://app.pinata.cloud

2. Create API keys:
   ‚Üí Navigate to https://app.pinata.cloud/keys
   ‚Üí Click "New Key"
   ‚Üí Give it a name like "Stamp Rush"
   ‚Üí Enable "Admin" permissions
   ‚Üí Click "Create Key"

3. Copy your credentials:
   ‚Üí API Key: The long string starting with letters/numbers
   ‚Üí API Secret: The even longer secret string
   ‚Üí ‚ö†Ô∏è  Save these immediately - you won't see the secret again!

4. Run this setup script:
   ‚Üí node frontend/lib/ipfs/setup.js

üîí Security Notes:
   ‚Ä¢ Never commit your .env.local file to version control
   ‚Ä¢ Keep your API keys private
   ‚Ä¢ Regenerate keys if they're ever compromised
  `);
}

// Handle command line arguments
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  showInstructions();
  process.exit(0);
}

// Run setup if called directly
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Setup failed:', error.message);
    process.exit(1);
  });
}

module.exports = {
  main,
  showInstructions,
  validateApiKey,
  validateApiSecret
}; 